#!/usr/bin/env python3
# Script Name: Signature-based Malware Detection Part 3 of 3
# Description: Development of my basic antivirus tool in Python by incorporating VirusTotal.
# Author: Israel Quirola
# Date: February 21, 2024

# The below demo script works in tandem with virustotal-search.py from https://github.com/eduardxyz/virustotal-search, which must be in the same directory.
# Set your environment variable first to keep it out of your script here.

import os
import hashlib
import platform
import logging
import datetime

## apikey = os.getenv('API_KEY_VIRUSTOTAL') # Set your environment variable before proceeding. You'll need a free API key from virustotal.com so get signed up there first.
hash = 'D41D8CD98F00B204E9800998ECF8427E' # Set your hash here. 

# This concatenates everything into a working shell statement that gets passed into virustotal-search.py
## query = 'python3 virustotal-search.py -k ' + apikey + ' -m ' + hash

## os.system(query)

# Setup logging
logging.basicConfig(filename='search.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Function to generate MD5 hash
def generate_md5(file_path):
    hasher = hashlib.md5()
    with open(file_path, 'rb') as f:
        # Read the file in chunks to avoid memory issues
        for chunk in iter(lambda: f.read(4096), b''):
            hasher.update(chunk)
    return hasher.hexdigest()

# Function to search files in a directory
def search_file(file_name, directory):
    hits = 0
    searched_files = 0

    # Iterate over each file and directory in the directory
    for root, dirs, files in os.walk(directory):
        for file in files:
            searched_files += 1
            file_path = os.path.join(root, file)
            
            try:
                # Generate MD5 hash for each file
                md5_hash = generate_md5(file_path)
                
                # Get file information
                file_stat = os.stat(file_path)
                file_size = file_stat.st_size
                modified_time = datetime.datetime.fromtimestamp(file_stat.st_mtime)

                # Print file information
                print(f"Timestamp: {modified_time}, File: {file}, Size: {file_size} bytes, Path: {file_path}, MD5: {md5_hash}")
                logging.info(f"Found: {file_name} at location: {file_path}")

                # Query VirusTotal API here
                # Set up your API key and VirusTotal search script here
                
            except Exception as e:
                print(f"Error processing file: {file_path}, Error: {e}")
                logging.error(f"Error processing file: {file_path}, Error: {e}")

    print(f"Total files searched: {searched_files}")
    print(f"Total hits found: {hits}")
    logging.info(f"Total files searched: {searched_files}")
    logging.info(f"Total hits found: {hits}")

def main():
    # Prompt user for file name and directory
    file_name = input("Enter the file name to search for: ")
    directory = input("Enter the directory to search in: ")

    # Validate directory path
    if not os.path.isdir(directory):
        print("Invalid directory path.")
        logging.error("Invalid directory path entered.")
        return

    # Search file in the directory
    search_file(file_name, directory)

if __name__ == "__main__":
    main()

# Added a placeholder for querying the VirusTotal API within the search_file function, where the MD5 hash for each file is generated.
# You need to set up your VirusTotal API key and integrate it with the search_file function to query the API for each file's MD5 hash.
# Ensure that you have the virustotal-search.py script in the same directory as this script and that you have set up your VirusTotal API key as an environment variable, as instructed earlier.