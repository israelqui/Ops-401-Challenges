#!/usr/bin/env python3
# Script Name: Signature-based Malware Detection Part 2 of 3
# Description: Continue developing your Python malware detection tool.
# Author: Israel Quirola
# Date: February 20, 2024
# This script now recursively scans each file and folder within the specified directory, generating MD5 hashes for each file and printing relevant information including timestamp, file name, size, file path, and MD5 hash. Additionally, it handles exceptions that might occur during file processing and logs any errors encountered during the search process.

# Import:
import os
import hashlib
import platform
import logging
import datetime

# Setup logging
logging.basicConfig(filename='search.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def generate_md5(file_path):
    hasher = hashlib.md5()
    with open(file_path, 'rb') as f:
        # Read the file in chunks to avoid memory issues
        for chunk in iter(lambda: f.read(4096), b''):
            hasher.update(chunk)
    return hasher.hexdigest()

def search_file(file_name, directory):
    hits = 0
    searched_files = 0

    # Iterate over each file and directory in the directory
    for root, dirs, files in os.walk(directory):
        for file in files:
            searched_files += 1
            file_path = os.path.join(root, file)
            
            try:
                # Generate MD5 hash for each file
                md5_hash = generate_md5(file_path)
                
                # Get file information
                file_stat = os.stat(file_path)
                file_size = file_stat.st_size
                modified_time = datetime.datetime.fromtimestamp(file_stat.st_mtime)

                # Print file information
                print(f"Timestamp: {modified_time}, File: {file}, Size: {file_size} bytes, Path: {file_path}, MD5: {md5_hash}")
                logging.info(f"Found: {file_name} at location: {file_path}")
            except Exception as e:
                print(f"Error processing file: {file_path}, Error: {e}")
                logging.error(f"Error processing file: {file_path}, Error: {e}")

    print(f"Total files searched: {searched_files}")
    print(f"Total hits found: {hits}")
    logging.info(f"Total files searched: {searched_files}")
    logging.info(f"Total hits found: {hits}")

def main():
    # Prompt user for file name and directory
    file_name = input("Enter the file name to search for: ")
    directory = input("Enter the directory to search in: ")

    # Validate directory path
    if not os.path.isdir(directory):
        print("Invalid directory path.")
        logging.error("Invalid directory path entered.")
        return

    # Search file in the directory
    search_file(file_name, directory)

if __name__ == "__main__":
    main()